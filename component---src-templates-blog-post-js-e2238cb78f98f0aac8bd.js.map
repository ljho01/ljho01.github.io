{"version":3,"file":"component---src-templates-blog-post-js-e2238cb78f98f0aac8bd.js","mappings":"4PAiBA,MAbY,IAAa,IAAZ,KAACA,GAAK,EACf,MAAMC,EAAUD,EAChB,MAAgB,KAAZC,EACQ,iCAGR,uBAAKC,UAAU,UACX,4BAAM,qBACN,uBAAKC,wBAAyB,CAAEC,OAAQH,KACtC,ECJd,MAuGaI,EAAO,IAAyC,IAAtCL,MAAQM,eAAgBC,IAAQ,EACrD,OACE,gBAAC,IAAG,CACFC,MAAOD,EAAKE,YAAYD,MACxBE,YAAaH,EAAKE,YAAYC,aAAeH,EAAKI,SAClD,EAIN,MAhHyB,IAGlB,IAAD,MAFJX,MAAM,SAAEY,EAAQ,KAAEC,EAAI,KAAEC,EAAMR,eAAgBC,EAAI,kBAAEQ,GAAmB,SACvEC,GACD,EACC,MAAMC,GAA6B,QAAjB,EAAAH,EAAKI,oBAAY,aAAjB,EAAmBV,QAAK,QACpCW,EAAUZ,EAAKa,gBACfC,EAAaN,EAAkBO,MAC/BC,EAAWR,EAAkBS,WAC7BC,EAAWlB,EAAKkB,SACtB,IAAIC,EAAY,GAChB,MAAMC,EAAQ,CAAC,EAiCf,OAhCAF,EAASG,SAAQ,CAACC,EAASC,KACzBH,EAAME,EAAQE,IAAMD,CAAK,KAkB3BE,EAAAA,EAAAA,YAAU,KACRN,EAAUE,SAAQ,CAACK,EAAUH,KAC3BG,EAASC,QAAQC,SAASC,eAAeX,EAASK,GAAOC,IAAI,IAE/D,MAAMM,EAAOF,SAASG,uBAAuB,UAAU,GAAGC,qBAAqB,KAC/EC,MAAMC,KAAKJ,GAAMT,SAASC,IACxBA,EAAQa,MAAMC,WAAa,KAAK,GAChC,GACD,IAMD,gBAAC,IAAM,CAAC3B,SAAUA,EAAUR,MAAOS,GACjC,gBAAC,IAAG,CACJT,MAAOD,EAAKE,YAAYD,MACxBoC,KAAMrC,EAAKE,YAAYmC,KACvBvB,WAAYA,EACZwB,MAAOtB,EACPP,SAAUT,EAAKE,YAAYqC,WAE3B,uBAAK5C,UAAU,mBACb,uBAAKA,UAAU,oBACb,uBACEA,UAAU,YACV6C,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAY1C,EAAKE,YAAYD,OAC1C,yBAAID,EAAKE,YAAYmC,OAErB,2BACEzC,wBAAyB,CAAEC,OAAQG,EAAK2C,MACxCD,SAAS,gBAEb,gCAGF,gBAAC,EAAG,CAACjD,KAAMmB,KAEb,uBAAKjB,UAAU,iBACb,sBACEwC,MAAO,CACLS,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACG3C,GACC,gBAAC,EAAA4C,KAAI,CAACC,GAAI7C,EAAS8C,OAAOC,KAAMC,IAAI,QAAO,KACtChD,EAASH,YAAYD,QAI9B,0BACGK,GACC,gBAAC,EAAA2C,KAAI,CAACC,GAAI5C,EAAK6C,OAAOC,KAAMC,IAAI,QAC7B/C,EAAKJ,YAAYD,MAAM,UAO7B,C","sources":["webpack://gatsby-starter-blog/./src/components/toc.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\r\nimport \"./toc.css\"\r\n\r\n\r\nconst Toc = ({data}) => {\r\n    const tochtml = data\r\n    if (tochtml === \"\") {\r\n        return (<></>)\r\n    }\r\n    return (\r\n        <nav className=\"tocnav\">\r\n            <span>Table of Contents</span>\r\n            <div dangerouslySetInnerHTML={{ __html: tochtml }}/>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Toc","import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Nav from \"../components/nav\"\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\nimport Toc from \"../components/toc\"\r\nimport { useEffect } from \"react\"\r\n\r\nconst BlogPostTemplate = ({\r\n  data: { previous, next, site, markdownRemark: post, allMarkdownRemark },\r\n  location,\r\n}) => {\r\n  const siteTitle = site.siteMetadata?.title || `Title`\r\n  const tocdata = post.tableOfContents\r\n  const categories = allMarkdownRemark.group\r\n  const totcount = allMarkdownRemark.totalCount\r\n  const headings = post.headings\r\n  let observers = []\r\n  const heads = {}\r\n  headings.forEach((element, index) => {\r\n    heads[element.id] = index\r\n  //   observers.push(new IntersectionObserver((entries) => {\r\n  //     const interIndex = heads[entries[0].target.id]\r\n  //     const lis = document.getElementsByClassName('tocnav')[0].getElementsByTagName(\"a\")\r\n  //     if (entries[0].isIntersecting) {\r\n  //       console.log(entries[0].target.id, \"나타남\", entries[0])\r\n  //     }\r\n  //     else {\r\n  //       console.log(entries[0].target.id, \"사라짐\", entries[0])\r\n  //     }\r\n  //   },\r\n  //   {\r\n  //     rootMargin: \"200px 0px 0px 0px\"\r\n  //   }\r\n  // ))\r\n  });\r\n  \r\n  // 옵저버 등록\r\n  useEffect(()=> {\r\n    observers.forEach((observer, index) => {\r\n      observer.observe(document.getElementById(headings[index].id))\r\n    })\r\n    const lis0 = document.getElementsByClassName('tocnav')[0].getElementsByTagName(\"a\")\r\n    Array.from(lis0).forEach((element) => {\r\n      element.style.fontWeight = \"500\"\r\n    })\r\n  }, [])\r\n  \r\n\r\n\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <Nav \r\n      title={post.frontmatter.title} \r\n      date={post.frontmatter.date} \r\n      categories={categories} \r\n      count={totcount} \r\n      location={post.frontmatter.category}\r\n      />\r\n      <div className=\"blogpostwrapper\">\r\n        <div className=\"post-toc-wrapper\">\r\n          <div\r\n            className=\"blog-post\"\r\n            itemScope\r\n            itemType=\"http://schema.org/Article\"\r\n          >\r\n            <header>\r\n              <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\r\n              <p>{post.frontmatter.date}</p>\r\n            </header>\r\n              <section\r\n                dangerouslySetInnerHTML={{ __html: post.html }}\r\n                itemProp=\"articleBody\"\r\n              />\r\n            <footer>\r\n            </footer>\r\n          </div>\r\n          <Toc data={tocdata}/>\r\n        </div>\r\n        <nav className=\"blog-post-nav\">\r\n          <ul\r\n            style={{\r\n              display: `flex`,\r\n              flexWrap: `wrap`,\r\n              justifyContent: `space-between`,\r\n              listStyle: `none`,\r\n              padding: 0,\r\n            }}\r\n          >\r\n            <li>\r\n              {previous && (\r\n                <Link to={previous.fields.slug} rel=\"prev\">\r\n                  ← {previous.frontmatter.title}\r\n                </Link>\r\n              )}\r\n            </li>\r\n            <li>\r\n              {next && (\r\n                <Link to={next.fields.slug} rel=\"next\">\r\n                  {next.frontmatter.title} →\r\n                </Link>\r\n              )}\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const Head = ({ data: { markdownRemark: post } }) => {\r\n  return (\r\n    <Seo\r\n      title={post.frontmatter.title}\r\n      description={post.frontmatter.description || post.excerpt}\r\n    />\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug(\r\n    $id: String!\r\n    $previousPostId: String\r\n    $nextPostId: String\r\n  ) \r\n  {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(id: { eq: $id }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      tableOfContents\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        description\r\n        category\r\n      }\r\n      headings {\r\n        id\r\n      }\r\n    }\r\n    previous: markdownRemark(id: { eq: $previousPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n    next: markdownRemark(id: { eq: $nextPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\r\n      totalCount\r\n      group(field: { frontmatter: { category: SELECT }}) {\r\n        fieldValue\r\n        totalCount\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["data","tochtml","className","dangerouslySetInnerHTML","__html","Head","markdownRemark","post","title","frontmatter","description","excerpt","previous","next","site","allMarkdownRemark","location","siteTitle","siteMetadata","tocdata","tableOfContents","categories","group","totcount","totalCount","headings","observers","heads","forEach","element","index","id","useEffect","observer","observe","document","getElementById","lis0","getElementsByClassName","getElementsByTagName","Array","from","style","fontWeight","date","count","category","itemScope","itemType","itemProp","html","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}